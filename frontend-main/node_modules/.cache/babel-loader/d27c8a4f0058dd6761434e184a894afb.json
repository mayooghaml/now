{"ast":null,"code":"var _jsxFileName = \"E:\\\\now\\\\MERN-Assignment-frontend-main\\\\src\\\\components\\\\post\\\\UpdatePost.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect } from 'react';\nimport { useParams, useNavigate } from 'react-router';\nimport useToken from \"../userAccounts/useToken\";\nimport ErrorPage from \"../error/Error\";\nimport \"../article/Article.css\";\nimport Preloader from '../article/PreLoader';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nconst UpdatePost = () => {\n  _s();\n\n  const {\n    token\n  } = useToken();\n  const {\n    id\n  } = useParams();\n  const [postValues, setPostValues] = useState({\n    title: \"\",\n    description: \"\"\n  });\n  const [loading, setLoading] = useState(true);\n  const navigate = useNavigate();\n  useEffect(() => {\n    fetchAPI();\n  }, [id]);\n\n  async function fetchAPI() {\n    const response = await fetch(`/api/posts/${id}`, {\n      method: 'get',\n      headers: {\n        'Authorization': `Bearer ${token.token}`\n      }\n    });\n    const body = await response.json();\n    if (body !== {\n      status: \"Error\"\n    }) setPostValues({\n      title: body.title,\n      description: body.description\n    });\n    setLoading(false);\n  }\n\n  function handleChange(event) {\n    const {\n      name,\n      value\n    } = event.target;\n    setPostValues({ ...postValues,\n      [name]: value\n    });\n  }\n\n  async function fetchPost() {\n    const title = postValues.title;\n    const description = postValues.description;\n\n    if (title !== \"\" && description !== \"\") {\n      const response = await fetch(`/api/posts/${id}/update`, {\n        method: 'post',\n        body: JSON.stringify({\n          title,\n          description\n        }),\n        headers: {\n          'Content-Type': 'application/json',\n          'Authorization': `Bearer ${token.token}`\n        }\n      });\n      const body = await response.json();\n\n      if (body.status !== \"Error\") {\n        alert(\"Post Update Successful.\");\n        navigate(`/article/${id}`, {\n          replace: true\n        });\n      } else {\n        alert(\"Post Update Unsuccessful!\");\n      }\n    } else {\n      alert(\"Enter all required fields.\");\n    }\n  }\n\n  if (!postValues.title) return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(Preloader, {\n      loading: loading\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 63,\n      columnNumber: 19\n    }, this), /*#__PURE__*/_jsxDEV(ErrorPage, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 63,\n      columnNumber: 50\n    }, this)]\n  }, void 0, true);\n  if (!token.admin) return /*#__PURE__*/_jsxDEV(ErrorPage, {}, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 64,\n    columnNumber: 29\n  }, this);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"blogPost\",\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"addComment\",\n      children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n        className: \"commentHeading\",\n        children: \"Update a Blog Post\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 68,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n        children: [\"Title:\", /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 71,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"text\",\n          className: \"titleTextBox\",\n          name: \"title\",\n          value: postValues.title,\n          onChange: handleChange\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 72,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 69,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 74,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n        children: [\"Description:\", /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 77,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"textarea\", {\n          rows: \"20\",\n          cols: \"100\",\n          name: \"description\",\n          value: postValues.description,\n          onChange: handleChange\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 78,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 75,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 80,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: fetchPost,\n        children: \"Submit\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 81,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 67,\n      columnNumber: 13\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 66,\n    columnNumber: 9\n  }, this);\n};\n\n_s(UpdatePost, \"w7Iku3+5NnJ/1WlZVzSaOPKAtDQ=\", false, function () {\n  return [useToken, useParams, useNavigate];\n});\n\n_c = UpdatePost;\nexport default UpdatePost;\n\nvar _c;\n\n$RefreshReg$(_c, \"UpdatePost\");","map":{"version":3,"sources":["E:/now/MERN-Assignment-frontend-main/src/components/post/UpdatePost.js"],"names":["React","useState","useEffect","useParams","useNavigate","useToken","ErrorPage","Preloader","UpdatePost","token","id","postValues","setPostValues","title","description","loading","setLoading","navigate","fetchAPI","response","fetch","method","headers","body","json","status","handleChange","event","name","value","target","fetchPost","JSON","stringify","alert","replace","admin"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from 'react';\nimport { useParams, useNavigate } from 'react-router';\nimport useToken from \"../userAccounts/useToken\";\nimport ErrorPage from \"../error/Error\";\nimport \"../article/Article.css\";\nimport Preloader from '../article/PreLoader';\n\nconst UpdatePost = () => {\n    const { token } = useToken();\n    const { id } = useParams();\n    const [postValues, setPostValues] = useState({ title: \"\", description: \"\" });\n    const [loading, setLoading] = useState(true);\n    const navigate = useNavigate();\n\n    useEffect(() => {\n        fetchAPI();\n    }, [id]);\n\n    async function fetchAPI() {\n        const response = await fetch(`/api/posts/${id}`,{\n            method: 'get',\n            headers: {\n                'Authorization': `Bearer ${token.token}`\n            }\n        });\n        const body = await response.json();\n        if (body !== { status: \"Error\" })\n            setPostValues({ title: body.title, description: body.description });\n        setLoading(false);\n    }\n\n    function handleChange(event){\n        const { name, value } = event.target;\n        setPostValues({ ...postValues, [name]: value });\n    }\n    async function fetchPost() {\n        const title = postValues.title;\n        const description = postValues.description;\n\n        if (title !== \"\" && description !== \"\") {\n            const response = await fetch(`/api/posts/${id}/update`, {\n                method: 'post',\n                body: JSON.stringify({ title, description}),\n                headers: {\n                    'Content-Type': 'application/json',\n                    'Authorization': `Bearer ${token.token}`\n                }\n            })\n            const body = await response.json();\n            \n            if (body.status !== \"Error\") {\n                alert(\"Post Update Successful.\");\n                navigate(`/article/${id}`, { replace: true });\n            } else {\n                alert(\"Post Update Unsuccessful!\");\n            }\n            \n        } else {\n            alert(\"Enter all required fields.\");\n        }\n    }\n    if (!postValues.title) \n        return (<><Preloader loading={loading} /><ErrorPage /></>);\n    if(!token.admin) return <ErrorPage />\n    return (\n        <div className=\"blogPost\">\n            <div className=\"addComment\">\n                <h3 className='commentHeading'>Update a Blog Post</h3>\n                <label>\n                    Title:\n                    <br></br>\n                    <input type=\"text\" className=\"titleTextBox\" name=\"title\" value={postValues.title} onChange={handleChange} />\n                </label>\n                <br></br>\n                <label>\n                    Description:\n                    <br />\n                    <textarea rows=\"20\" cols=\"100\" name=\"description\" value={postValues.description} onChange={handleChange} ></textarea>\n                </label>\n                <br></br>\n                <button onClick={fetchPost}>Submit</button>\n            </div>\n        </div>\n    );\n};\n\nexport default UpdatePost;"]},"metadata":{},"sourceType":"module"}