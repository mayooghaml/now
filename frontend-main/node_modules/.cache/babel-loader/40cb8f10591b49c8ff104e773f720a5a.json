{"ast":null,"code":"var _jsxFileName = \"E:\\\\now\\\\MERN-Assignment-frontend-main\\\\src\\\\components\\\\article\\\\AddComments.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState } from 'react';\nimport useToken from '../userAccounts/useToken';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst AddComments = props => {\n  _s();\n\n  const {\n    id,\n    setArticleData\n  } = props;\n  const {\n    token\n  } = useToken();\n  const [commentValues, setCommentValues] = useState({\n    username: token.uname,\n    comment: \"\"\n  });\n\n  function handleChange(event) {\n    const {\n      name,\n      value\n    } = event.target;\n    setCommentValues({ ...commentValues,\n      [name]: value\n    });\n  }\n\n  async function fetchComments() {\n    const username = commentValues.username;\n    const text = commentValues.comment;\n\n    if (username !== \"\" && text !== \"\") {\n      const response = await fetch(`/api/comments/${id}/comment`, {\n        method: 'post',\n        body: JSON.stringify({\n          username,\n          text\n        }),\n        headers: {\n          'Content-Type': 'application/json',\n          'Authorization': `Bearer ${token.token}`\n        }\n      });\n      const body = await response.json();\n      setArticleData(body);\n      setCommentValues({\n        comment: \"\"\n      });\n    }\n  }\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"addComment\",\n    children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n      className: \"commentHeading\",\n      children: \"Add a Comment\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 34,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n      children: [\"Name:\", /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 37,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        name: \"username\",\n        value: commentValues.username,\n        disabled: true\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 38,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 35,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 40,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n      children: [\"Comment:\", /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 43,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"textarea\", {\n        rows: \"4\",\n        cols: \"50\",\n        name: \"comment\",\n        value: commentValues.comment,\n        onChange: handleChange\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 44,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 41,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 46,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: fetchComments,\n      children: \"Submit\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 47,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 33,\n    columnNumber: 9\n  }, this);\n};\n\n_s(AddComments, \"1i6dqA4pFZtYTTAyT5XgaMdKBOk=\", false, function () {\n  return [useToken];\n});\n\n_c = AddComments;\nexport default AddComments;\n\nvar _c;\n\n$RefreshReg$(_c, \"AddComments\");","map":{"version":3,"sources":["E:/now/MERN-Assignment-frontend-main/src/components/article/AddComments.js"],"names":["React","useState","useToken","AddComments","props","id","setArticleData","token","commentValues","setCommentValues","username","uname","comment","handleChange","event","name","value","target","fetchComments","text","response","fetch","method","body","JSON","stringify","headers","json"],"mappings":";;;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,QAAgC,OAAhC;AACA,OAAOC,QAAP,MAAqB,0BAArB;;;AAGA,MAAMC,WAAW,GAAIC,KAAD,IAAW;AAAA;;AAC3B,QAAM;AAAEC,IAAAA,EAAF;AAAMC,IAAAA;AAAN,MAAyBF,KAA/B;AACA,QAAM;AAAEG,IAAAA;AAAF,MAAYL,QAAQ,EAA1B;AACA,QAAM,CAACM,aAAD,EAAgBC,gBAAhB,IAAoCR,QAAQ,CAAC;AAAES,IAAAA,QAAQ,EAAEH,KAAK,CAACI,KAAlB;AAAyBC,IAAAA,OAAO,EAAE;AAAlC,GAAD,CAAlD;;AAEA,WAASC,YAAT,CAAsBC,KAAtB,EAA4B;AACxB,UAAM;AAAEC,MAAAA,IAAF;AAAQC,MAAAA;AAAR,QAAkBF,KAAK,CAACG,MAA9B;AACAR,IAAAA,gBAAgB,CAAC,EAAE,GAAGD,aAAL;AAAoB,OAACO,IAAD,GAAQC;AAA5B,KAAD,CAAhB;AACH;;AACD,iBAAeE,aAAf,GAA+B;AAC3B,UAAMR,QAAQ,GAAGF,aAAa,CAACE,QAA/B;AACA,UAAMS,IAAI,GAAGX,aAAa,CAACI,OAA3B;;AAEA,QAAIF,QAAQ,KAAK,EAAb,IAAmBS,IAAI,KAAK,EAAhC,EAAoC;AAChC,YAAMC,QAAQ,GAAG,MAAMC,KAAK,CAAE,iBAAgBhB,EAAG,UAArB,EAAgC;AACxDiB,QAAAA,MAAM,EAAE,MADgD;AAExDC,QAAAA,IAAI,EAAEC,IAAI,CAACC,SAAL,CAAe;AAAEf,UAAAA,QAAF;AAAYS,UAAAA;AAAZ,SAAf,CAFkD;AAGxDO,QAAAA,OAAO,EAAE;AACL,0BAAgB,kBADX;AAEL,2BAAkB,UAASnB,KAAK,CAACA,KAAM;AAFlC;AAH+C,OAAhC,CAA5B;AAQA,YAAMgB,IAAI,GAAG,MAAMH,QAAQ,CAACO,IAAT,EAAnB;AACArB,MAAAA,cAAc,CAACiB,IAAD,CAAd;AACAd,MAAAA,gBAAgB,CAAC;AAAEG,QAAAA,OAAO,EAAE;AAAX,OAAD,CAAhB;AACH;AACJ;;AACD,sBACI;AAAK,IAAA,SAAS,EAAC,YAAf;AAAA,4BACI;AAAI,MAAA,SAAS,EAAC,gBAAd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YADJ,eAEI;AAAA,uCAEI;AAAA;AAAA;AAAA;AAAA,cAFJ,eAGI;AAAO,QAAA,IAAI,EAAC,MAAZ;AAAmB,QAAA,IAAI,EAAC,UAAxB;AAAmC,QAAA,KAAK,EAAEJ,aAAa,CAACE,QAAxD;AAAkE,QAAA,QAAQ;AAA1E;AAAA;AAAA;AAAA;AAAA,cAHJ;AAAA;AAAA;AAAA;AAAA;AAAA,YAFJ,eAOI;AAAA;AAAA;AAAA;AAAA,YAPJ,eAQI;AAAA,0CAEI;AAAA;AAAA;AAAA;AAAA,cAFJ,eAGI;AAAU,QAAA,IAAI,EAAC,GAAf;AAAmB,QAAA,IAAI,EAAC,IAAxB;AAA6B,QAAA,IAAI,EAAC,SAAlC;AAA4C,QAAA,KAAK,EAAEF,aAAa,CAACI,OAAjE;AAA0E,QAAA,QAAQ,EAAGC;AAArF;AAAA;AAAA;AAAA;AAAA,cAHJ;AAAA;AAAA;AAAA;AAAA;AAAA,YARJ,eAaI;AAAA;AAAA;AAAA;AAAA,YAbJ,eAcI;AAAQ,MAAA,OAAO,EAAEK,aAAjB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YAdJ;AAAA;AAAA;AAAA;AAAA;AAAA,UADJ;AAmBH,CA9CD;;GAAMf,W;UAEgBD,Q;;;KAFhBC,W;AAiDN,eAAeA,WAAf","sourcesContent":["import React, { useState } from 'react';\nimport useToken from '../userAccounts/useToken';\n\n\nconst AddComments = (props) => {\n    const { id, setArticleData } = props;\n    const { token } = useToken();\n    const [commentValues, setCommentValues] = useState({ username: token.uname, comment: \"\" });\n\n    function handleChange(event){\n        const { name, value } = event.target;\n        setCommentValues({ ...commentValues, [name]: value });\n    }\n    async function fetchComments() {\n        const username = commentValues.username;\n        const text = commentValues.comment;\n\n        if (username !== \"\" && text !== \"\") {\n            const response = await fetch(`/api/comments/${id}/comment`, {\n                method: 'post',\n                body: JSON.stringify({ username, text }),\n                headers: {\n                    'Content-Type': 'application/json',\n                    'Authorization': `Bearer ${token.token}`\n                }\n            })\n            const body = await response.json();\n            setArticleData(body);\n            setCommentValues({ comment: \"\" });\n        }\n    }\n    return (\n        <div className=\"addComment\">\n            <h3 className='commentHeading'>Add a Comment</h3>\n            <label>\n                Name:\n                <br></br>\n                <input type=\"text\" name=\"username\" value={commentValues.username} disabled/>\n            </label>\n            <br></br>\n            <label>\n                Comment:\n                <br/>\n                <textarea rows=\"4\" cols=\"50\" name=\"comment\" value={commentValues.comment} onChange={ handleChange } ></textarea>\n            </label>\n            <br></br>\n            <button onClick={fetchComments}>Submit</button>\n        </div>\n   \n    );\n};\n\n\nexport default AddComments;"]},"metadata":{},"sourceType":"module"}